//https://leetcode-cn.com/problems/palindrome-pairs/
class Solution {
     public class TreeNode{
        TreeNode[] next;
        int index;
        List<Integer> list;        
        
        TreeNode(){
            next=new TreeNode[26]; 
            index=-1;
            list=new ArrayList();
        }
    }
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res=new ArrayList();
        TreeNode root=new TreeNode();
        for(int i=0;i<words.length;i++)
            addWord(root,words[i],i);
        for(int i=0;i<words.length;i++)
            search(words,i,root,res);
        return res;
    }  
    public void addWord(TreeNode root,String word,int index){
        for(int i=word.length()-1;i>=0;i--){
            int j=word.charAt(i)-'a';
            if(root.next[j]==null)
                root.next[j]=new TreeNode();
            if(isPalindrome(word,0,i))
                root.list.add(index);
            root=root.next[j];
        }
        root.list.add(index);
        root.index=index;
    }
    
    public void search(String[] words,int i,TreeNode root,List<List<Integer>> res){
        for(int j=0;j<words[i].length();j++){
            if(root.index>=0 && root.index!=i && isPalindrome(words[i],j,words[i].length() - 1))
                res.add(Arrays.asList(i,root.index));
            root=root.next[words[i].charAt(j)-'a'];
            if(root==null) return;
        }
        for(int j:root.list){
            if(i==j) continue;
            res.add(Arrays.asList(i,j));
        }
    }
    private boolean isPalindrome(String word, int i, int j) {
        while (i < j) 
            if (word.charAt(i++) != word.charAt(j--)) return false;
        return true;
    }
}
